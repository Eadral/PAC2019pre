Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C++ Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 18.0.5.274 Build 20180823

Compiler options: -I../include -g -O3 -qopenmp -ltbb -std=c++11 -qopt-report=4 -qopt-report-phase=vec -c -o main.o

Begin optimization report for: main()

    Report from: Vector optimizations [vec]


LOOP BEGIN at main.cpp(75,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at main.cpp(77,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at main.cpp(79,4)
      <Multiversioned v1>
         remark #15329: vectorization support: non-unit strided store was emulated for the variable <x.__b_N7FYSPACE20MemoryBlockReferenceIdEE.__b_N7FYSPACE20MemoryB>, stride is unknown to compiler   [ main.cpp(81,6) ]
         remark #15329: vectorization support: non-unit strided store was emulated for the variable <y.__b_N7FYSPACE20MemoryBlockReferenceIdEE.__b_N7FYSPACE20MemoryB>, stride is unknown to compiler   [ main.cpp(82,6) ]
         remark #15329: vectorization support: non-unit strided store was emulated for the variable <z.__b_N7FYSPACE20MemoryBlockReferenceIdEE.__b_N7FYSPACE20MemoryB>, stride is unknown to compiler   [ main.cpp(83,6) ]
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 4
         remark #15309: vectorization support: normalized vectorization overhead 0.057
         remark #15300: LOOP WAS VECTORIZED
         remark #15453: unmasked strided stores: 3 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 21 
         remark #15477: vector cost: 11.000 
         remark #15478: estimated potential speedup: 1.880 
         remark #15487: type converts: 1 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at main.cpp(79,4)
      <Remainder loop for vectorization, Multiversioned v1>
         remark #15305: vectorization support: vector length 2
         remark #15309: vectorization support: normalized vectorization overhead 0.682
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at main.cpp(79,4)
      <Multiversioned v2>
         remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
      LOOP END

      LOOP BEGIN at main.cpp(79,4)
      <Remainder, Multiversioned v2>
      LOOP END

      LOOP BEGIN at main.cpp(79,4)
      <Remainder loop for vectorization, Multiversioned v1>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at main.cpp(109,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between xfn.__b_N7FYSPACE20MemoryBlockReferenceIdEE.__b_N7FYSPACE20Memor (115:8) and vol.__b_N7FYSPACE20MemoryBlockReferenceIdEE.__b_N7FYSPACE20Memor (127:8)

   LOOP BEGIN at main.cpp(111,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between xfn.__b_N7FYSPACE20MemoryBlockReferenceIdEE.__b_N7FYSPACE20Memor (115:8) and vol.__b_N7FYSPACE20MemoryBlockReferenceIdEE.__b_N7FYSPACE20Memor (127:8)

      LOOP BEGIN at main.cpp(113,4)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed OUTPUT dependence between xfn.__b_N7FYSPACE20MemoryBlockReferenceIdEE.__b_N7FYSPACE20Memor (115:8) and vol.__b_N7FYSPACE20MemoryBlockReferenceIdEE.__b_N7FYSPACE20Memor (127:8)
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at main.cpp(131,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between q_4d.__b_N7FYSPACE20MemoryBlockReferenceIdEE.__b_N7FYSPACE20Memo (137:9) and q_4d.__b_N7FYSPACE20MemoryBlockReferenceIdEE.__b_N7FYSPACE20Memo (140:9)

   LOOP BEGIN at main.cpp(133,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between q_4d.__b_N7FYSPACE20MemoryBlockReferenceIdEE.__b_N7FYSPACE20Memo (137:9) and q_4d.__b_N7FYSPACE20MemoryBlockReferenceIdEE.__b_N7FYSPACE20Memo (140:9)

      LOOP BEGIN at main.cpp(135,4)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed OUTPUT dependence between q_4d.__b_N7FYSPACE20MemoryBlockReferenceIdEE.__b_N7FYSPACE20Memo (137:9) and q_4d.__b_N7FYSPACE20MemoryBlockReferenceIdEE.__b_N7FYSPACE20Memo (140:9)
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at main.cpp(213,17)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ main.cpp(215,11) ]
LOOP END

LOOP BEGIN at main.cpp(220,17)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ main.cpp(222,11) ]
LOOP END

LOOP BEGIN at ../include/DataStruct_Range.h(110,48) inlined into main.cpp(235,130)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ main.cpp(235,11) ]
LOOP END

LOOP BEGIN at ../include/DataStruct_Range.h(110,48) inlined into main.cpp(255,130)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ main.cpp(255,11) ]
LOOP END

LOOP BEGIN at main.cpp(273,17)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ main.cpp(275,11) ]
LOOP END


Non-optimizable loops:


LOOP BEGIN at main.cpp(153,2)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ main.cpp(196,10) ]
LOOP END
===========================================================================

Begin optimization report for: FYSPACE::FYArray<RDouble, 4>::operator=(FYSPACE::FYArray<RDouble, 4> *, RDouble)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../include/FYProduct.h(34,5) inlined into ../include/FYOps.hxx(734,9)
   remark #15389: vectorization support: reference length->elems[i] has unaligned access   [ ../include/FYSimpleArray.h(67,16) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 4
   remark #15427: loop was completely unrolled
   remark #15309: vectorization support: normalized vectorization overhead 3.778
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 2.250 
   remark #15478: estimated potential speedup: 0.270 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../include/FYSimpleArray.h(224,5) inlined into ../include/FYOps.hxx(734,9)
   remark #15389: vectorization support: reference x->elems[i] has unaligned access   [ ../include/FYSimpleArray.h(67,16) ]
   remark #15389: vectorization support: reference y->elems[i] has unaligned access   [ ../include/FYSimpleArray.h(67,16) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 4
   remark #15427: loop was completely unrolled
   remark #15309: vectorization support: normalized vectorization overhead 2.846
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 3.250 
   remark #15478: estimated potential speedup: 0.480 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../include/FYOps.hxx(470,11) inlined into ../include/FYOps.hxx(734,9)
   remark #15389: vectorization support: reference iter.stack_.stack_[i] has unaligned access   [ ../include/FYFastArrayIterator.h(38,16) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.333
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 2 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../include/FYOps.hxx(511,5) inlined into ../include/FYOps.hxx(734,9)
   remark #15389: vectorization support: reference last[i] has unaligned access   [ ../include/FYOps.hxx(513,9) ]
   remark #15389: vectorization support: reference maxRank->elems[i] has unaligned access   [ ../include/FYSimpleArray.h(67,16) ]
   remark #15389: vectorization support: reference maxRank->elems[i] has unaligned access   [ ../include/FYSimpleArray.h(67,16) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <this->elems[maxRank->elems[i]]>, part of index is read from memory   [ ../include/FYSimpleArray.h(67,16) ]
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <this->elems[maxRank->elems[i]]>, part of index is read from memory   [ ../include/FYSimpleArray.h(67,16) ]
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.127
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15462: unmasked indexed (or gather) loads: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 14 
   remark #15477: vector cost: 31.500 
   remark #15478: estimated potential speedup: 0.490 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../include/FYOps.hxx(531,11) inlined into ../include/FYOps.hxx(734,9)
   remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ ../include/FYOps.hxx(547,13) ]
LOOP END

LOOP BEGIN at ../include/FYFastArrayIterator.h(181,9) inlined into ../include/FYOps.hxx(734,9)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../include/FYOps.hxx(641,13) inlined into ../include/FYOps.hxx(734,9)
      remark #15523: loop was not vectorized: loop control variable iter.data_ was found, but loop iteration count cannot be computed before executing the loop
   LOOP END

   LOOP BEGIN at ../include/FYOps.hxx(655,9) inlined into ../include/FYOps.hxx(734,9)
      remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ ../include/FYOps.hxx(655,32) ]
   LOOP END

   LOOP BEGIN at ../include/FYOps.hxx(686,9) inlined into ../include/FYOps.hxx(734,9)
      remark #15389: vectorization support: reference iter.stack_.stack_[j] has unaligned access   [ ../include/FYFastArrayIterator.h(38,16) ]
      remark #15389: vectorization support: reference maxRank->elems[j-1] has unaligned access   [ ../include/FYSimpleArray.h(67,16) ]
      remark #15389: vectorization support: reference last[j-1] has unaligned access   [ ../include/FYOps.hxx(691,13) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15328: vectorization support: irregularly indexed load was emulated for the variable <this->elems[maxRank->elems[j-1]]>, part of index is read from memory   [ ../include/FYSimpleArray.h(67,16) ]
      remark #15328: vectorization support: irregularly indexed load was emulated for the variable <this->elems[maxRank->elems[j-1]]>, part of index is read from memory   [ ../include/FYSimpleArray.h(67,16) ]
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.186
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 2 
      remark #15462: unmasked indexed (or gather) loads: 2 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 15 
      remark #15477: vector cost: 35.000 
      remark #15478: estimated potential speedup: 0.390 
      remark #15487: type converts: 1 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at ../include/FYOps.hxx(686,9) inlined into ../include/FYOps.hxx(734,9)
   <Remainder>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: FYSPACE::FYArray<RDouble, 4>::operator()<FYSPACE::Range, FYSPACE::Range, FYSPACE::Range, int>(FYSPACE::FYSliceInfo<double, FYSPACE::Range, FYSPACE::Range, FYSPACE::Range, int, FYSPACE::FYnilArraySection, FYSPACE::FYnilArraySection, FYSPACE::FYnilArraySection, FYSPACE::FYnilArraySection, FYSPACE::FYnilArraySection, FYSPACE::FYnilArraySection, FYSPACE::FYnilArraySection>::T_slice *, const FYSPACE::FYArray<RDouble, 4> *, FYSPACE::Range *, FYSPACE::Range *, FYSPACE::Range *, int) const

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../include/FYStorage.h(40,9) inlined into ../include/FYOps.hxx(247,24)
   remark #15389: vectorization support: reference this->elems[i] has unaligned access   [ ../include/FYSimpleArray.h(62,16) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.667
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.850 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into ../include/FYOps.hxx(247,24)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/4.8.5/bits/stl_algobase.h(751,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.500
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 2 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.540 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into ../include/FYOps.hxx(247,24)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/4.8.5/bits/stl_algobase.h(751,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.500
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 2 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.540 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../include/FYSlice.hxx(100,5) inlined into ../include/FYOps.hxx(247,24)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between j (104:34) and j (104:34)
LOOP END

LOOP BEGIN at ../include/FYArray.hxx(655,5) inlined into ../include/FYOps.hxx(247,24)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between __p1->zeroOffset_ (659:13) and __p1->zeroOffset_ (663:13)
LOOP END
===========================================================================

Begin optimization report for: FYSPACE::operator*<FYSPACE::FYArray<RDouble, 3>, FYSPACE::FYArray<RDouble, 3>>(FYSPACE::FYBinaryExprResult<FYSPACE::Multiply, FYSPACE::FYArray<RDouble, 3>, FYSPACE::FYArray<RDouble, 3>>::T_result *, const FYSPACE::FYETBase<FYSPACE::FYArray<RDouble, 3>> &, const FYSPACE::FYETBase<FYSPACE::FYArray<RDouble, 3>> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../include/FYSimpleArray.h(224,5) inlined into ../include/FYET.h(114,1)
   remark #15389: vectorization support: reference x->elems[i] has unaligned access   [ ../include/FYSimpleArray.h(67,16) ]
   remark #15389: vectorization support: reference y->elems[i] has unaligned access   [ ../include/FYSimpleArray.h(67,16) ]
   remark #15389: vectorization support: reference x->elems[i] has unaligned access   [ ../include/FYSimpleArray.h(67,16) ]
   remark #15389: vectorization support: reference y->elems[i] has unaligned access   [ ../include/FYSimpleArray.h(67,16) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 2.778
   remark #15450: unmasked unaligned unit stride loads: 4 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 11 
   remark #15477: vector cost: 9.000 
   remark #15478: estimated potential speedup: 0.410 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../include/FYSimpleArray.h(224,5) inlined into ../include/FYET.h(114,1)
LOOP END
===========================================================================

Begin optimization report for: FYSPACE::FYArray<RDouble, 3>::operator=<FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprBinaryOp<FYSPACE::FYExprWrap<FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprBinaryOp<FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::Multiply<FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype, FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype>>>>::T_expr, FYSPACE::FYExprWrap<FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprBinaryOp<FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::Multiply<FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype, FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype>>>>::T_expr, FYSPACE::Add<FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprBinaryOp<FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::Multiply<FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype, FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype>>>::T_numtype, FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprBinaryOp<FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::Multiply<FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype, FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype>>>::T_numtype>>>>(FYSPACE::FYArray<RDouble, 3> *, const FYSPACE::FYETBase<FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprBinaryOp<FYSPACE::FYExprWrap<FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprBinaryOp<FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::Multiply<FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype, FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype>>>>::T_expr, FYSPACE::FYExprWrap<FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprBinaryOp<FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::Multiply<FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype, FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype>>>>::T_expr, FYSPACE::Add<FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprBinaryOp<FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::Multiply<FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype, FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype>>>::T_numtype, FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprBinaryOp<FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::Multiply<FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype, FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype>>>::T_numtype>>>> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../include/FYProduct.h(34,5) inlined into ../include/FYOps.hxx(741,2)
   remark #15389: vectorization support: reference length->elems[i] has unaligned access   [ ../include/FYSimpleArray.h(67,16) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 3.143
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 0.280 
   remark #15488: --- end vector cost summary ---
LOOP END
===========================================================================

Begin optimization report for: FYSPACE::FYArray<RDouble, 3>::evaluateWithStackTraversalN<FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprBinaryOp<FYSPACE::FYExprWrap<FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprBinaryOp<FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::Multiply<FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype, FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype>>>>::T_expr, FYSPACE::FYExprWrap<FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprBinaryOp<FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::Multiply<FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype, FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype>>>>::T_expr, FYSPACE::Add<FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprBinaryOp<FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::Multiply<FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype, FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype>>>::T_numtype, FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprBinaryOp<FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::Multiply<FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype, FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype>>>::T_numtype>>>, FYSPACE::FYUpdate<FYSPACE::FYArray<RDouble, 4>::T_numtype, FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprConstant<double>>::T_numtype>>(FYSPACE::FYArray<RDouble, 3> *, FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprBinaryOp<FYSPACE::FYExprWrap<FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprBinaryOp<FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::Multiply<FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype, FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype>>>>::T_expr, FYSPACE::FYExprWrap<FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprBinaryOp<FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::Multiply<FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype, FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype>>>>::T_expr, FYSPACE::Add<FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprBinaryOp<FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::Multiply<FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype, FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype>>>::T_numtype, FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprBinaryOp<FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::Multiply<FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype, FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype>>>::T_numtype>>> *, FYSPACE::FYUpdate<FYSPACE::FYArray<RDouble, 4>::T_numtype, FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprConstant<double>>::T_numtype>)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../include/FYSimpleArray.h(224,5) inlined into ../include/FYOps.hxx(465,50)
   remark #15389: vectorization support: reference x->elems[i] has unaligned access   [ ../include/FYSimpleArray.h(67,16) ]
   remark #15389: vectorization support: reference y->elems[i] has unaligned access   [ ../include/FYSimpleArray.h(67,16) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 2.778
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 4.500 
   remark #15478: estimated potential speedup: 0.450 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../include/FYOps.hxx(470,11)
<Distributed chunk1>
   remark #15389: vectorization support: reference iter.stack_.stack_[i] has unaligned access   [ ../include/FYFastArrayIterator.h(38,16) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15309: vectorization support: normalized vectorization overhead 0.333
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 2 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.500 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../include/FYOps.hxx(470,11)
<Distributed chunk2>
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between this (161:15) and this (161:15)
LOOP END

LOOP BEGIN at ../include/FYOps.hxx(511,5)
   remark #15389: vectorization support: reference last[i] has unaligned access   [ ../include/FYOps.hxx(513,9) ]
   remark #15389: vectorization support: reference maxRank->elems[i] has unaligned access   [ ../include/FYSimpleArray.h(67,16) ]
   remark #15389: vectorization support: reference maxRank->elems[i] has unaligned access   [ ../include/FYSimpleArray.h(67,16) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <this->elems[maxRank->elems[i]]>, part of index is read from memory   [ ../include/FYSimpleArray.h(67,16) ]
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <this->elems[maxRank->elems[i]]>, part of index is read from memory   [ ../include/FYSimpleArray.h(67,16) ]
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15309: vectorization support: normalized vectorization overhead 0.127
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15462: unmasked indexed (or gather) loads: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 14 
   remark #15477: vector cost: 31.500 
   remark #15478: estimated potential speedup: 0.390 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../include/FYOps.hxx(531,11)
   remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ ../include/FYOps.hxx(547,13) ]
LOOP END

LOOP BEGIN at ../include/FYFastArrayIterator.h(181,9) inlined into ../include/FYOps.hxx(697,14)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../include/FYOps.hxx(641,13)
      remark #15523: loop was not vectorized: loop control variable iter.data_ was found, but loop iteration count cannot be computed before executing the loop
   LOOP END

   LOOP BEGIN at ../include/FYOps.hxx(655,9)
      remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ ../include/FYOps.hxx(655,32) ]
   LOOP END

   LOOP BEGIN at ../include/FYOps.hxx(686,9)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between this (161:15) and this (161:15)
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: FYSPACE::FYArray<RDouble, 3>::operator()(FYSPACE::FYArray<RDouble, 3>::T_array *, const FYSPACE::FYArray<RDouble, 3> *, FYSPACE::Range *, FYSPACE::Range *, FYSPACE::Range *) const

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../include/FYStorage.h(40,9) inlined into ../include/FYOps.hxx(190,36)
   remark #15389: vectorization support: reference this->elems[i] has unaligned access   [ ../include/FYSimpleArray.h(62,16) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.667
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.850 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into ../include/FYOps.hxx(190,36)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/4.8.5/bits/stl_algobase.h(751,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.500
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 2 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.540 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into ../include/FYOps.hxx(190,36)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/4.8.5/bits/stl_algobase.h(751,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.500
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 2 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.540 
   remark #15488: --- end vector cost summary ---
LOOP END
===========================================================================

Begin optimization report for: FYSPACE::operator-<FYSPACE::FYArray<RDouble, 3>>(FYSPACE::FYUnaryExprResult<FYSPACE::UnaryMinus, FYSPACE::FYArray<RDouble, 3>>::T_result *, const FYSPACE::FYETBase<FYSPACE::FYArray<RDouble, 3>> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../include/FYSimpleArray.h(224,5) inlined into ../include/FYET.h(118,1)
   remark #15389: vectorization support: reference x->elems[i] has unaligned access   [ ../include/FYSimpleArray.h(67,16) ]
   remark #15389: vectorization support: reference y->elems[i] has unaligned access   [ ../include/FYSimpleArray.h(67,16) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 2.778
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 4.500 
   remark #15478: estimated potential speedup: 0.450 
   remark #15488: --- end vector cost summary ---
LOOP END
===========================================================================

Begin optimization report for: FYSPACE::operator*<FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprUnaryOp<FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::UnaryMinus<FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype>>>, FYSPACE::FYArray<RDouble, 3>>(FYSPACE::FYBinaryExprResult<FYSPACE::Multiply, FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprUnaryOp<FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::UnaryMinus<FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype>>>, FYSPACE::FYArray<RDouble, 3>>::T_result *, const FYSPACE::FYETBase<FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprUnaryOp<FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::UnaryMinus<FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype>>>> &, const FYSPACE::FYETBase<FYSPACE::FYArray<RDouble, 3>> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../include/FYSimpleArray.h(224,5) inlined into ../include/FYET.h(114,1)
   remark #15389: vectorization support: reference x->elems[i] has unaligned access   [ ../include/FYSimpleArray.h(67,16) ]
   remark #15389: vectorization support: reference y->elems[i] has unaligned access   [ ../include/FYSimpleArray.h(67,16) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 2.778
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 4.500 
   remark #15478: estimated potential speedup: 0.450 
   remark #15488: --- end vector cost summary ---
LOOP END
===========================================================================

Begin optimization report for: FYSPACE::FYArray<RDouble, 3>::operator=<FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprBinaryOp<FYSPACE::FYExprWrap<FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprUnaryOp<FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::UnaryMinus<FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype>>>>::T_expr, FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::Multiply<FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype, FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype>>>>(FYSPACE::FYArray<RDouble, 3> *, const FYSPACE::FYETBase<FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprBinaryOp<FYSPACE::FYExprWrap<FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprUnaryOp<FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::UnaryMinus<FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype>>>>::T_expr, FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::Multiply<FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype, FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype>>>> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../include/FYProduct.h(34,5) inlined into ../include/FYOps.hxx(741,2)
   remark #15389: vectorization support: reference length->elems[i] has unaligned access   [ ../include/FYSimpleArray.h(67,16) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 3.143
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 0.280 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../include/FYSimpleArray.h(224,5) inlined into ../include/FYOps.hxx(741,2)
   remark #15389: vectorization support: reference x->elems[i] has unaligned access   [ ../include/FYSimpleArray.h(67,16) ]
   remark #15389: vectorization support: reference y->elems[i] has unaligned access   [ ../include/FYSimpleArray.h(67,16) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 2.778
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 4.500 
   remark #15478: estimated potential speedup: 0.450 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../include/FYOps.hxx(470,11) inlined into ../include/FYOps.hxx(741,2)
<Distributed chunk1>
   remark #15389: vectorization support: reference iter.stack_.stack_[i] has unaligned access   [ ../include/FYFastArrayIterator.h(38,16) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15309: vectorization support: normalized vectorization overhead 0.333
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 2 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.500 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../include/FYOps.hxx(470,11) inlined into ../include/FYOps.hxx(741,2)
<Distributed chunk2>
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between U3c_V.U3c_V.U3c_V.U3c_V.U3c_V.U3c_V.U3c_V[i] (161:15) and U3c_V.U3c_V.U3c_V.U3c_V (161:15)
LOOP END

LOOP BEGIN at ../include/FYOps.hxx(511,5) inlined into ../include/FYOps.hxx(741,2)
   remark #15389: vectorization support: reference last[i] has unaligned access   [ ../include/FYOps.hxx(513,9) ]
   remark #15389: vectorization support: reference maxRank->elems[i] has unaligned access   [ ../include/FYSimpleArray.h(67,16) ]
   remark #15389: vectorization support: reference maxRank->elems[i] has unaligned access   [ ../include/FYSimpleArray.h(67,16) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <this->elems[maxRank->elems[i]]>, part of index is read from memory   [ ../include/FYSimpleArray.h(67,16) ]
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <this->elems[maxRank->elems[i]]>, part of index is read from memory   [ ../include/FYSimpleArray.h(67,16) ]
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15309: vectorization support: normalized vectorization overhead 0.127
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15462: unmasked indexed (or gather) loads: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 14 
   remark #15477: vector cost: 31.500 
   remark #15478: estimated potential speedup: 0.390 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../include/FYOps.hxx(531,11) inlined into ../include/FYOps.hxx(741,2)
   remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ ../include/FYOps.hxx(547,13) ]
LOOP END

LOOP BEGIN at ../include/FYFastArrayIterator.h(181,9) inlined into ../include/FYOps.hxx(741,2)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../include/FYOps.hxx(726,38) inlined into ../include/FYOps.hxx(741,2)
      remark #15523: loop was not vectorized: loop control variable iter.data_ was found, but loop iteration count cannot be computed before executing the loop
   LOOP END

   LOOP BEGIN at ../include/FYOps.hxx(655,9) inlined into ../include/FYOps.hxx(741,2)
      remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ ../include/FYOps.hxx(655,32) ]
   LOOP END

   LOOP BEGIN at ../include/FYOps.hxx(686,9) inlined into ../include/FYOps.hxx(741,2)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed FLOW dependence between U3c_V.U3c_V.U3c_V.U3c_V.U3c_V.U3c_V.U3c_V[j] (161:15) and U3c_V.U3c_V.U3c_V.U3c_V (161:15)
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: FYSPACE::FYArray<RDouble, 3>::operator+=<FYSPACE::FYBinaryExprResult<FYSPACE::Multiply, FYSPACE::FYArray<RDouble, 3>, FYSPACE::FYArray<RDouble, 3>>::T_result>(FYSPACE::FYArray<RDouble, 3> *, const FYSPACE::FYBinaryExprResult<FYSPACE::Multiply, FYSPACE::FYArray<RDouble, 3>, FYSPACE::FYArray<RDouble, 3>>::T_result &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../include/FYProduct.h(34,5) inlined into ../include/FYOps.hxx(281,1)
   remark #15389: vectorization support: reference length->elems[i] has unaligned access   [ ../include/FYSimpleArray.h(67,16) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 3.143
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 0.280 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../include/FYSimpleArray.h(224,5) inlined into ../include/FYOps.hxx(281,1)
   remark #15389: vectorization support: reference x->elems[i] has unaligned access   [ ../include/FYSimpleArray.h(67,16) ]
   remark #15389: vectorization support: reference y->elems[i] has unaligned access   [ ../include/FYSimpleArray.h(67,16) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 2.778
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 4.500 
   remark #15478: estimated potential speedup: 0.450 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../include/FYOps.hxx(470,11) inlined into ../include/FYOps.hxx(281,1)
<Distributed chunk1>
   remark #15389: vectorization support: reference iter.stack_.stack_[i] has unaligned access   [ ../include/FYFastArrayIterator.h(38,16) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15309: vectorization support: normalized vectorization overhead 0.333
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 2 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.500 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../include/FYOps.hxx(470,11) inlined into ../include/FYOps.hxx(281,1)
<Distributed chunk2>
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between U46_V.U46_V.U46_V.U46_V.U46_V[i] (161:15) and U46_V.U46_V.U46_V.U46_V (161:15)
LOOP END

LOOP BEGIN at ../include/FYOps.hxx(511,5) inlined into ../include/FYOps.hxx(281,1)
   remark #15389: vectorization support: reference last[i] has unaligned access   [ ../include/FYOps.hxx(513,9) ]
   remark #15389: vectorization support: reference maxRank->elems[i] has unaligned access   [ ../include/FYSimpleArray.h(67,16) ]
   remark #15389: vectorization support: reference maxRank->elems[i] has unaligned access   [ ../include/FYSimpleArray.h(67,16) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <this->elems[maxRank->elems[i]]>, part of index is read from memory   [ ../include/FYSimpleArray.h(67,16) ]
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <this->elems[maxRank->elems[i]]>, part of index is read from memory   [ ../include/FYSimpleArray.h(67,16) ]
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15309: vectorization support: normalized vectorization overhead 0.127
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15462: unmasked indexed (or gather) loads: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 14 
   remark #15477: vector cost: 31.500 
   remark #15478: estimated potential speedup: 0.390 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../include/FYOps.hxx(531,11) inlined into ../include/FYOps.hxx(281,1)
   remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ ../include/FYOps.hxx(547,13) ]
LOOP END

LOOP BEGIN at ../include/FYFastArrayIterator.h(181,9) inlined into ../include/FYOps.hxx(281,1)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../include/FYOps.hxx(726,38) inlined into ../include/FYOps.hxx(281,1)
      remark #15523: loop was not vectorized: loop control variable iter.data_ was found, but loop iteration count cannot be computed before executing the loop
   LOOP END

   LOOP BEGIN at ../include/FYOps.hxx(655,9) inlined into ../include/FYOps.hxx(281,1)
      remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ ../include/FYOps.hxx(655,32) ]
   LOOP END

   LOOP BEGIN at ../include/FYOps.hxx(686,9) inlined into ../include/FYOps.hxx(281,1)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed FLOW dependence between U46_V.U46_V.U46_V.U46_V.U46_V[j] (161:15) and U46_V.U46_V.U46_V.U46_V (161:15)
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: FYSPACE::FYArray<RDouble, 3>::operator-=<FYSPACE::FYBinaryExprResult<FYSPACE::Multiply, FYSPACE::FYArray<RDouble, 3>, FYSPACE::FYArray<RDouble, 3>>::T_result>(FYSPACE::FYArray<RDouble, 3> *, const FYSPACE::FYBinaryExprResult<FYSPACE::Multiply, FYSPACE::FYArray<RDouble, 3>, FYSPACE::FYArray<RDouble, 3>>::T_result &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../include/FYProduct.h(34,5) inlined into ../include/FYOps.hxx(282,1)
   remark #15389: vectorization support: reference length->elems[i] has unaligned access   [ ../include/FYSimpleArray.h(67,16) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 3.143
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 0.280 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../include/FYSimpleArray.h(224,5) inlined into ../include/FYOps.hxx(282,1)
   remark #15389: vectorization support: reference x->elems[i] has unaligned access   [ ../include/FYSimpleArray.h(67,16) ]
   remark #15389: vectorization support: reference y->elems[i] has unaligned access   [ ../include/FYSimpleArray.h(67,16) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 2.778
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 4.500 
   remark #15478: estimated potential speedup: 0.450 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../include/FYOps.hxx(470,11) inlined into ../include/FYOps.hxx(282,1)
<Distributed chunk1>
   remark #15389: vectorization support: reference iter.stack_.stack_[i] has unaligned access   [ ../include/FYFastArrayIterator.h(38,16) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15309: vectorization support: normalized vectorization overhead 0.333
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 2 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.500 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../include/FYOps.hxx(470,11) inlined into ../include/FYOps.hxx(282,1)
<Distributed chunk2>
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between U5a_V.U5a_V.U5a_V.U5a_V.U5a_V[i] (161:15) and U5a_V.U5a_V.U5a_V.U5a_V (161:15)
LOOP END

LOOP BEGIN at ../include/FYOps.hxx(511,5) inlined into ../include/FYOps.hxx(282,1)
   remark #15389: vectorization support: reference last[i] has unaligned access   [ ../include/FYOps.hxx(513,9) ]
   remark #15389: vectorization support: reference maxRank->elems[i] has unaligned access   [ ../include/FYSimpleArray.h(67,16) ]
   remark #15389: vectorization support: reference maxRank->elems[i] has unaligned access   [ ../include/FYSimpleArray.h(67,16) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <this->elems[maxRank->elems[i]]>, part of index is read from memory   [ ../include/FYSimpleArray.h(67,16) ]
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <this->elems[maxRank->elems[i]]>, part of index is read from memory   [ ../include/FYSimpleArray.h(67,16) ]
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15309: vectorization support: normalized vectorization overhead 0.127
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15462: unmasked indexed (or gather) loads: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 14 
   remark #15477: vector cost: 31.500 
   remark #15478: estimated potential speedup: 0.390 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../include/FYOps.hxx(531,11) inlined into ../include/FYOps.hxx(282,1)
   remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ ../include/FYOps.hxx(547,13) ]
LOOP END

LOOP BEGIN at ../include/FYFastArrayIterator.h(181,9) inlined into ../include/FYOps.hxx(282,1)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../include/FYOps.hxx(726,38) inlined into ../include/FYOps.hxx(282,1)
      remark #15523: loop was not vectorized: loop control variable iter.data_ was found, but loop iteration count cannot be computed before executing the loop
   LOOP END

   LOOP BEGIN at ../include/FYOps.hxx(655,9) inlined into ../include/FYOps.hxx(282,1)
      remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ ../include/FYOps.hxx(655,32) ]
   LOOP END

   LOOP BEGIN at ../include/FYOps.hxx(686,9) inlined into ../include/FYOps.hxx(282,1)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed FLOW dependence between U5a_V.U5a_V.U5a_V.U5a_V.U5a_V[j] (161:15) and U5a_V.U5a_V.U5a_V.U5a_V (161:15)
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: FYSPACE::operator+<FYSPACE::FYArray<RDouble, 3>, FYSPACE::FYArray<RDouble, 3>>(FYSPACE::FYBinaryExprResult<FYSPACE::Add, FYSPACE::FYArray<RDouble, 3>, FYSPACE::FYArray<RDouble, 3>>::T_result *, const FYSPACE::FYETBase<FYSPACE::FYArray<RDouble, 3>> &, const FYSPACE::FYETBase<FYSPACE::FYArray<RDouble, 3>> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../include/FYSimpleArray.h(224,5) inlined into ../include/FYET.h(112,1)
   remark #15389: vectorization support: reference x->elems[i] has unaligned access   [ ../include/FYSimpleArray.h(67,16) ]
   remark #15389: vectorization support: reference y->elems[i] has unaligned access   [ ../include/FYSimpleArray.h(67,16) ]
   remark #15389: vectorization support: reference x->elems[i] has unaligned access   [ ../include/FYSimpleArray.h(67,16) ]
   remark #15389: vectorization support: reference y->elems[i] has unaligned access   [ ../include/FYSimpleArray.h(67,16) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 2.778
   remark #15450: unmasked unaligned unit stride loads: 4 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 11 
   remark #15477: vector cost: 9.000 
   remark #15478: estimated potential speedup: 0.410 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../include/FYSimpleArray.h(224,5) inlined into ../include/FYET.h(112,1)
LOOP END
===========================================================================

Begin optimization report for: FYSPACE::operator+<FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprBinaryOp<FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::Add<FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprBinaryOp<FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::Multiply<FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype, FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype>>>::T_numtype, FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprBinaryOp<FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::Multiply<FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype, FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype>>>::T_numtype>>>, FYSPACE::FYArray<RDouble, 3>>(FYSPACE::FYBinaryExprResult<FYSPACE::Add, FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprBinaryOp<FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::Add<FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprBinaryOp<FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::Multiply<FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype, FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype>>>::T_numtype, FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprBinaryOp<FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::Multiply<FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype, FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype>>>::T_numtype>>>, FYSPACE::FYArray<RDouble, 3>>::T_result *, const FYSPACE::FYETBase<FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprBinaryOp<FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::Add<FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprBinaryOp<FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::Multiply<FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype, FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype>>>::T_numtype, FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprBinaryOp<FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::Multiply<FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype, FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype>>>::T_numtype>>>> &, const FYSPACE::FYETBase<FYSPACE::FYArray<RDouble, 3>> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../include/FYSimpleArray.h(224,5) inlined into ../include/FYET.h(112,1)
   remark #15389: vectorization support: reference x->elems[i] has unaligned access   [ ../include/FYSimpleArray.h(67,16) ]
   remark #15389: vectorization support: reference y->elems[i] has unaligned access   [ ../include/FYSimpleArray.h(67,16) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 2.778
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 4.500 
   remark #15478: estimated potential speedup: 0.450 
   remark #15488: --- end vector cost summary ---
LOOP END
===========================================================================

Begin optimization report for: FYSPACE::operator+<FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprBinaryOp<FYSPACE::FYExprWrap<FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprBinaryOp<FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::Add<FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprBinaryOp<FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::Multiply<FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype, FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype>>>::T_numtype, FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprBinaryOp<FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::Multiply<FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype, FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype>>>::T_numtype>>>>::T_expr, FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::Add<FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprBinaryOp<FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::Multiply<FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype, FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype>>>::T_numtype, FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprBinaryOp<FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::Multiply<FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype, FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype>>>::T_numtype>>>, FYSPACE::FYArray<RDouble, 3>>(FYSPACE::FYBinaryExprResult<FYSPACE::Add, FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprBinaryOp<FYSPACE::FYExprWrap<FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprBinaryOp<FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::Add<FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprBinaryOp<FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::Multiply<FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype, FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype>>>::T_numtype, FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprBinaryOp<FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::Multiply<FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype, FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype>>>::T_numtype>>>>::T_expr, FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::Add<FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprBinaryOp<FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::Multiply<FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype, FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype>>>::T_numtype, FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprBinaryOp<FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::Multiply<FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype, FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype>>>::T_numtype>>>, FYSPACE::FYArray<RDouble, 3>>::T_result *, const FYSPACE::FYETBase<FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprBinaryOp<FYSPACE::FYExprWrap<FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprBinaryOp<FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::Add<FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprBinaryOp<FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::Multiply<FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype, FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype>>>::T_numtype, FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprBinaryOp<FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::Multiply<FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype, FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype>>>::T_numtype>>>>::T_expr, FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::Add<FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprBinaryOp<FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::Multiply<FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype, FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype>>>::T_numtype, FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprBinaryOp<FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::Multiply<FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype, FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype>>>::T_numtype>>>> &, const FYSPACE::FYETBase<FYSPACE::FYArray<RDouble, 3>> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../include/FYSimpleArray.h(224,5) inlined into ../include/FYET.h(112,1)
   remark #15389: vectorization support: reference x->elems[i] has unaligned access   [ ../include/FYSimpleArray.h(67,16) ]
   remark #15389: vectorization support: reference y->elems[i] has unaligned access   [ ../include/FYSimpleArray.h(67,16) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 2.778
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 4.500 
   remark #15478: estimated potential speedup: 0.450 
   remark #15488: --- end vector cost summary ---
LOOP END
===========================================================================

Begin optimization report for: FYSPACE::FYArray<RDouble, 3>::operator=<FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprBinaryOp<FYSPACE::FYExprWrap<double>::T_expr, FYSPACE::FYExprWrap<FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprBinaryOp<FYSPACE::FYExprWrap<FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprBinaryOp<FYSPACE::FYExprWrap<FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprBinaryOp<FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::Add<FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprBinaryOp<FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::Multiply<FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype, FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype>>>::T_numtype, FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprBinaryOp<FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::Multiply<FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype, FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype>>>::T_numtype>>>>::T_expr, FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::Add<FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprBinaryOp<FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::Multiply<FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype, FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype>>>::T_numtype, FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprBinaryOp<FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::Multiply<FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype, FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype>>>::T_numtype>>>>::T_expr, FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::Add<FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprBinaryOp<FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::Multiply<FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype, FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype>>>::T_numtype, FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprBinaryOp<FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::Multiply<FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype, FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype>>>::T_numtype>>>>::T_expr, FYSPACE::Multiply<FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype, FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype>>>>(FYSPACE::FYArray<RDouble, 3> *, const FYSPACE::FYETBase<FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprBinaryOp<FYSPACE::FYExprWrap<double>::T_expr, FYSPACE::FYExprWrap<FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprBinaryOp<FYSPACE::FYExprWrap<FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprBinaryOp<FYSPACE::FYExprWrap<FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprBinaryOp<FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::Add<FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprBinaryOp<FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::Multiply<FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype, FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype>>>::T_numtype, FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprBinaryOp<FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::Multiply<FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype, FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype>>>::T_numtype>>>>::T_expr, FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::Add<FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprBinaryOp<FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::Multiply<FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype, FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype>>>::T_numtype, FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprBinaryOp<FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::Multiply<FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype, FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype>>>::T_numtype>>>>::T_expr, FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::Add<FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprBinaryOp<FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::Multiply<FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype, FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype>>>::T_numtype, FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprBinaryOp<FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::Multiply<FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype, FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype>>>::T_numtype>>>>::T_expr, FYSPACE::Multiply<FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype, FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype>>>> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../include/FYProduct.h(34,5) inlined into ../include/FYOps.hxx(741,2)
   remark #15389: vectorization support: reference length->elems[i] has unaligned access   [ ../include/FYSimpleArray.h(67,16) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 3.143
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 0.280 
   remark #15488: --- end vector cost summary ---
LOOP END
===========================================================================

Begin optimization report for: FYSPACE::FYArray<RDouble, 3>::evaluateWithStackTraversalN<FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprBinaryOp<FYSPACE::FYExprWrap<double>::T_expr, FYSPACE::FYExprWrap<FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprBinaryOp<FYSPACE::FYExprWrap<FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprBinaryOp<FYSPACE::FYExprWrap<FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprBinaryOp<FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::Add<FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprBinaryOp<FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::Multiply<FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype, FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype>>>::T_numtype, FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprBinaryOp<FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::Multiply<FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype, FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype>>>::T_numtype>>>>::T_expr, FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::Add<FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprBinaryOp<FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::Multiply<FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype, FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype>>>::T_numtype, FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprBinaryOp<FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::Multiply<FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype, FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype>>>::T_numtype>>>>::T_expr, FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::Add<FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprBinaryOp<FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::Multiply<FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype, FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype>>>::T_numtype, FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprBinaryOp<FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::Multiply<FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype, FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype>>>::T_numtype>>>>::T_expr, FYSPACE::Multiply<FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype, FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype>>>, FYSPACE::FYUpdate<FYSPACE::FYArray<RDouble, 4>::T_numtype, FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprConstant<double>>::T_numtype>>(FYSPACE::FYArray<RDouble, 3> *, FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprBinaryOp<FYSPACE::FYExprWrap<double>::T_expr, FYSPACE::FYExprWrap<FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprBinaryOp<FYSPACE::FYExprWrap<FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprBinaryOp<FYSPACE::FYExprWrap<FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprBinaryOp<FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::Add<FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprBinaryOp<FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::Multiply<FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype, FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype>>>::T_numtype, FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprBinaryOp<FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::Multiply<FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype, FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype>>>::T_numtype>>>>::T_expr, FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::Add<FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprBinaryOp<FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::Multiply<FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype, FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype>>>::T_numtype, FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprBinaryOp<FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::Multiply<FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype, FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype>>>::T_numtype>>>>::T_expr, FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::Add<FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprBinaryOp<FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::Multiply<FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype, FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype>>>::T_numtype, FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprBinaryOp<FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::Multiply<FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype, FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype>>>::T_numtype>>>>::T_expr, FYSPACE::Multiply<FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype, FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype>>> *, FYSPACE::FYUpdate<FYSPACE::FYArray<RDouble, 4>::T_numtype, FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprConstant<double>>::T_numtype>)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../include/FYSimpleArray.h(224,5) inlined into ../include/FYOps.hxx(465,50)
   remark #15389: vectorization support: reference x->elems[i] has unaligned access   [ ../include/FYSimpleArray.h(67,16) ]
   remark #15389: vectorization support: reference y->elems[i] has unaligned access   [ ../include/FYSimpleArray.h(67,16) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 2.778
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 4.500 
   remark #15478: estimated potential speedup: 0.450 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../include/FYOps.hxx(470,11)
<Distributed chunk1>
   remark #15389: vectorization support: reference iter.stack_.stack_[i] has unaligned access   [ ../include/FYFastArrayIterator.h(38,16) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15309: vectorization support: normalized vectorization overhead 0.333
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 2 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.500 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../include/FYOps.hxx(470,11)
<Distributed chunk2>
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between this (161:15) and this (161:15)
LOOP END

LOOP BEGIN at ../include/FYOps.hxx(511,5)
   remark #15389: vectorization support: reference last[i] has unaligned access   [ ../include/FYOps.hxx(513,9) ]
   remark #15389: vectorization support: reference maxRank->elems[i] has unaligned access   [ ../include/FYSimpleArray.h(67,16) ]
   remark #15389: vectorization support: reference maxRank->elems[i] has unaligned access   [ ../include/FYSimpleArray.h(67,16) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <this->elems[maxRank->elems[i]]>, part of index is read from memory   [ ../include/FYSimpleArray.h(67,16) ]
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <this->elems[maxRank->elems[i]]>, part of index is read from memory   [ ../include/FYSimpleArray.h(67,16) ]
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15309: vectorization support: normalized vectorization overhead 0.127
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15462: unmasked indexed (or gather) loads: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 14 
   remark #15477: vector cost: 31.500 
   remark #15478: estimated potential speedup: 0.390 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../include/FYOps.hxx(531,11)
   remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ ../include/FYOps.hxx(547,13) ]
LOOP END

LOOP BEGIN at ../include/FYFastArrayIterator.h(181,9) inlined into ../include/FYOps.hxx(697,14)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../include/FYOps.hxx(641,13)
      remark #15523: loop was not vectorized: loop control variable iter.data_ was found, but loop iteration count cannot be computed before executing the loop
   LOOP END

   LOOP BEGIN at ../include/FYOps.hxx(655,9)
      remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ ../include/FYOps.hxx(655,32) ]
   LOOP END

   LOOP BEGIN at ../include/FYOps.hxx(686,9)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between this (161:15) and this (161:15)
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: FYSPACE::FYArray<RDouble, 3>::operator*=<FYSPACE::FYArray<RDouble, 3>::T_array>(FYSPACE::FYArray<RDouble, 3> *, const FYSPACE::FYArray<RDouble, 3>::T_array &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../include/FYSimpleArray.h(224,5) inlined into ../include/FYOps.hxx(283,1)
   remark #15389: vectorization support: reference x->elems[i] has unaligned access   [ ../include/FYSimpleArray.h(67,16) ]
   remark #15389: vectorization support: reference y->elems[i] has unaligned access   [ ../include/FYSimpleArray.h(67,16) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 2.778
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 4.500 
   remark #15478: estimated potential speedup: 0.450 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../include/FYProduct.h(34,5) inlined into ../include/FYOps.hxx(283,1)
   remark #15389: vectorization support: reference length->elems[i] has unaligned access   [ ../include/FYSimpleArray.h(67,16) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 3.143
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 0.280 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../include/FYSimpleArray.h(224,5) inlined into ../include/FYOps.hxx(283,1)
   remark #15389: vectorization support: reference x->elems[i] has unaligned access   [ ../include/FYSimpleArray.h(67,16) ]
   remark #15389: vectorization support: reference y->elems[i] has unaligned access   [ ../include/FYSimpleArray.h(67,16) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 2.778
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 4.500 
   remark #15478: estimated potential speedup: 0.450 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../include/FYOps.hxx(470,11) inlined into ../include/FYOps.hxx(283,1)
<Distributed chunk1>
   remark #15389: vectorization support: reference iter.stack_.stack_[i] has unaligned access   [ ../include/FYFastArrayIterator.h(38,16) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15309: vectorization support: normalized vectorization overhead 0.333
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 2 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.500 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../include/FYOps.hxx(470,11) inlined into ../include/FYOps.hxx(283,1)
<Distributed chunk2>
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between U6c_V.U6c_V.U6c_V[i] (161:15) and U6c_V.U6c_V (161:15)
LOOP END

LOOP BEGIN at ../include/FYOps.hxx(511,5) inlined into ../include/FYOps.hxx(283,1)
   remark #15389: vectorization support: reference last[i] has unaligned access   [ ../include/FYOps.hxx(513,9) ]
   remark #15389: vectorization support: reference maxRank->elems[i] has unaligned access   [ ../include/FYSimpleArray.h(67,16) ]
   remark #15389: vectorization support: reference maxRank->elems[i] has unaligned access   [ ../include/FYSimpleArray.h(67,16) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <this->elems[maxRank->elems[i]]>, part of index is read from memory   [ ../include/FYSimpleArray.h(67,16) ]
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <this->elems[maxRank->elems[i]]>, part of index is read from memory   [ ../include/FYSimpleArray.h(67,16) ]
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15309: vectorization support: normalized vectorization overhead 0.127
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15462: unmasked indexed (or gather) loads: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 14 
   remark #15477: vector cost: 31.500 
   remark #15478: estimated potential speedup: 0.390 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../include/FYOps.hxx(531,11) inlined into ../include/FYOps.hxx(283,1)
   remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ ../include/FYOps.hxx(547,13) ]
LOOP END

LOOP BEGIN at ../include/FYFastArrayIterator.h(181,9) inlined into ../include/FYOps.hxx(283,1)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../include/FYOps.hxx(726,38) inlined into ../include/FYOps.hxx(283,1)
      remark #15523: loop was not vectorized: loop control variable iter.data_ was found, but loop iteration count cannot be computed before executing the loop
   LOOP END

   LOOP BEGIN at ../include/FYOps.hxx(655,9) inlined into ../include/FYOps.hxx(283,1)
      remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ ../include/FYOps.hxx(655,32) ]
   LOOP END

   LOOP BEGIN at ../include/FYOps.hxx(686,9) inlined into ../include/FYOps.hxx(283,1)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed FLOW dependence between U6c_V.U6c_V.U6c_V[j] (161:15) and U6c_V.U6c_V (161:15)
   LOOP END

   LOOP BEGIN at ../include/FYOps.hxx(686,9) inlined into ../include/FYOps.hxx(283,1)
   <Remainder>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: FYSPACE::fortranTag::operator void(FYSPACE::GeneralArrayStorage<3> *, FYSPACE::fortranTag *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../include/FYStorage.h(183,9) inlined into ../include/FYStorage.h(210,7)
   remark #15389: vectorization support: reference U6_V.U6_V.U6_V.U6_V[i] has unaligned access   [ ../include/FYSimpleArray.h(62,16) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.667
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 2 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.500 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into ../include/FYStorage.h(210,7)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/4.8.5/bits/stl_algobase.h(751,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.500
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 2 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.540 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into ../include/FYStorage.h(210,7)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/4.8.5/bits/stl_algobase.h(751,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.500
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 2 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.540 
   remark #15488: --- end vector cost summary ---
LOOP END
===========================================================================

Begin optimization report for: FYSPACE::FYArray<RDouble, 4>::operator()(FYSPACE::FYArray<RDouble, 4>::T_array *, const FYSPACE::FYArray<RDouble, 4> *, FYSPACE::Range *, FYSPACE::Range *, FYSPACE::Range *, FYSPACE::Range *) const

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../include/FYStorage.h(40,9) inlined into ../include/FYOps.hxx(196,46)
   remark #15389: vectorization support: reference this->elems[i] has unaligned access   [ ../include/FYSimpleArray.h(62,16) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15427: loop was completely unrolled
   remark #15309: vectorization support: normalized vectorization overhead 0.667
   remark #15300: LOOP WAS VECTORIZED
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into ../include/FYOps.hxx(196,46)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/4.8.5/bits/stl_algobase.h(751,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.250
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 2 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.530 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into ../include/FYOps.hxx(196,46)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/4.8.5/bits/stl_algobase.h(751,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.250
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 2 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.530 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../include/FYStorage.h(65,30) inlined into ../include/FYOps.hxx(196,46)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between this->elems[_2] (65:30) and at (65:30)
LOOP END

LOOP BEGIN at ../include/FYStorage.h(66,30) inlined into ../include/FYOps.hxx(196,46)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between this->elems[_2] (66:30) and at (66:30)
LOOP END

LOOP BEGIN at ../include/FYStorage.h(67,30) inlined into ../include/FYOps.hxx(196,46)
LOOP END

LOOP BEGIN at ../include/FYArray.hxx(514,19) inlined into ../include/FYOps.hxx(196,46)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between __p1->elems[_2] (514:19) and this->elems[_2] (514:19)
LOOP END

LOOP BEGIN at ../include/FYArray.hxx(515,19) inlined into ../include/FYOps.hxx(196,46)
LOOP END
===========================================================================

Begin optimization report for: FYSPACE::FYArray<RDouble, 3>::operator=<FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprBinaryOp<FYSPACE::FYExprWrap<double>::T_expr, FYSPACE::FYExprWrap<FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprBinaryOp<FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::Add<FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprBinaryOp<FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::Multiply<FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype, FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype>>>::T_numtype, FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprBinaryOp<FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::Multiply<FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype, FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype>>>::T_numtype>>>>::T_expr, FYSPACE::Divide<FYSPACE::FYArrayExprConstant<double>::T_numtype, FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprBinaryOp<FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::Add<FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprBinaryOp<FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::Multiply<FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype, FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype>>>::T_numtype, FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprBinaryOp<FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::Multiply<FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype, FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype>>>::T_numtype>>>::T_numtype>>>>(FYSPACE::FYArray<RDouble, 3> *, const FYSPACE::FYETBase<FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprBinaryOp<FYSPACE::FYExprWrap<double>::T_expr, FYSPACE::FYExprWrap<FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprBinaryOp<FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::Add<FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprBinaryOp<FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::Multiply<FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype, FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype>>>::T_numtype, FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprBinaryOp<FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::Multiply<FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype, FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype>>>::T_numtype>>>>::T_expr, FYSPACE::Divide<FYSPACE::FYArrayExprConstant<double>::T_numtype, FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprBinaryOp<FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::Add<FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprBinaryOp<FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::Multiply<FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype, FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype>>>::T_numtype, FYSPACE::FYArrayExpr<FYSPACE::FYArrayExprBinaryOp<FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::FYExprWrap<FYSPACE::FYArray<RDouble, 3>>::T_expr, FYSPACE::Multiply<FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype, FYSPACE::FYFastArrayIterator<RDouble, 3>::T_numtype>>>::T_numtype>>>::T_numtype>>>> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../include/FYProduct.h(34,5) inlined into ../include/FYOps.hxx(741,2)
   remark #15389: vectorization support: reference length->elems[i] has unaligned access   [ ../include/FYSimpleArray.h(67,16) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 3.143
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 0.280 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../include/FYSimpleArray.h(224,5) inlined into ../include/FYOps.hxx(741,2)
   remark #15389: vectorization support: reference x->elems[i] has unaligned access   [ ../include/FYSimpleArray.h(67,16) ]
   remark #15389: vectorization support: reference y->elems[i] has unaligned access   [ ../include/FYSimpleArray.h(67,16) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 2.778
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 4.500 
   remark #15478: estimated potential speedup: 0.450 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../include/FYOps.hxx(470,11) inlined into ../include/FYOps.hxx(741,2)
<Distributed chunk1>
   remark #15389: vectorization support: reference iter.stack_.stack_[i] has unaligned access   [ ../include/FYFastArrayIterator.h(38,16) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15309: vectorization support: normalized vectorization overhead 0.333
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 2 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.500 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../include/FYOps.hxx(470,11) inlined into ../include/FYOps.hxx(741,2)
<Distributed chunk2>
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between U64_V.U64_V.U64_V.U64_V.U64_V.U64_V.U64_V[i] (161:15) and U64_V.U64_V.U64_V.U64_V.U64_V.U64_V (161:15)
LOOP END

LOOP BEGIN at ../include/FYOps.hxx(511,5) inlined into ../include/FYOps.hxx(741,2)
   remark #15389: vectorization support: reference last[i] has unaligned access   [ ../include/FYOps.hxx(513,9) ]
   remark #15389: vectorization support: reference maxRank->elems[i] has unaligned access   [ ../include/FYSimpleArray.h(67,16) ]
   remark #15389: vectorization support: reference maxRank->elems[i] has unaligned access   [ ../include/FYSimpleArray.h(67,16) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <this->elems[maxRank->elems[i]]>, part of index is read from memory   [ ../include/FYSimpleArray.h(67,16) ]
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <this->elems[maxRank->elems[i]]>, part of index is read from memory   [ ../include/FYSimpleArray.h(67,16) ]
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15309: vectorization support: normalized vectorization overhead 0.127
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15462: unmasked indexed (or gather) loads: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 14 
   remark #15477: vector cost: 31.500 
   remark #15478: estimated potential speedup: 0.390 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../include/FYOps.hxx(531,11) inlined into ../include/FYOps.hxx(741,2)
   remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ ../include/FYOps.hxx(547,13) ]
LOOP END

LOOP BEGIN at ../include/FYFastArrayIterator.h(181,9) inlined into ../include/FYOps.hxx(741,2)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../include/FYOps.hxx(726,38) inlined into ../include/FYOps.hxx(741,2)
      remark #15523: loop was not vectorized: loop control variable iter.data_ was found, but loop iteration count cannot be computed before executing the loop
   LOOP END

   LOOP BEGIN at ../include/FYOps.hxx(655,9) inlined into ../include/FYOps.hxx(741,2)
      remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ ../include/FYOps.hxx(655,32) ]
   LOOP END

   LOOP BEGIN at ../include/FYOps.hxx(686,9) inlined into ../include/FYOps.hxx(741,2)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed FLOW dependence between U64_V.U64_V.U64_V.U64_V.U64_V.U64_V.U64_V[j] (161:15) and U64_V.U64_V.U64_V.U64_V.U64_V.U64_V (161:15)
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: FYSPACE::FYArray<RDouble, 4>::FYArray(FYSPACE::FYArray<RDouble, 4> *, FYSPACE::Range *, FYSPACE::Range *, FYSPACE::Range *, FYSPACE::Range *, FYSPACE::GeneralArrayStorage<4> *)

    Report from: Code generation optimizations [cg]

../include/FYArray.hxx(640:20)::_ZN7FYSPACE7FYArrayIdLi4EEC1ENS_5RangeES2_S2_S2_NS_19GeneralArrayStorageILi4EEE:  Assume directive not useful: removing

../include/FYArray.hxx(636:20)::_ZN7FYSPACE7FYArrayIdLi4EEC1ENS_5RangeES2_S2_S2_NS_19GeneralArrayStorageILi4EEE:  Assume directive not useful: removing


    Report from: Vector optimizations [vec]


LOOP BEGIN at ../include/FYStorage.h(49,37) inlined into ../include/FYArray.hxx(175,14)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between this->elems[_2] (49:37) and rhs[_2] (49:37)
LOOP END

LOOP BEGIN at ../include/FYStorage.h(49,68) inlined into ../include/FYArray.hxx(175,14)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between this->elems[_2] (49:68) and rhs[_2] (49:68)
LOOP END

LOOP BEGIN at ../include/FYStorage.h(49,94) inlined into ../include/FYArray.hxx(175,14)
LOOP END

LOOP BEGIN at ../include/FYStorage.h(86,9) inlined into ../include/FYArray.hxx(189,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between result (88:13) and result (88:13)
LOOP END

LOOP BEGIN at ../include/FYArray.hxx(607,9) inlined into ../include/FYArray.hxx(189,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between this (615:17) and this->elems[this] (623:20)
LOOP END

LOOP BEGIN at ../include/FYArray.hxx(655,5) inlined into ../include/FYArray.hxx(189,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between this->zeroOffset_ (659:13) and this->zeroOffset_ (663:13)
LOOP END

LOOP BEGIN at ../include/FYProduct.h(34,5) inlined into ../include/FYArray.hxx(189,2)
   remark #15389: vectorization support: reference length->elems[i] has unaligned access   [ ../include/FYSimpleArray.h(67,16) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 4
   remark #15427: loop was completely unrolled
   remark #15309: vectorization support: normalized vectorization overhead 3.778
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 2.250 
   remark #15478: estimated potential speedup: 0.270 
   remark #15488: --- end vector cost summary ---
LOOP END
===========================================================================

Begin optimization report for: FYSPACE::FYArray<RDouble, 3>::FYArray(FYSPACE::FYArray<RDouble, 3> *, FYSPACE::Range *, FYSPACE::Range *, FYSPACE::Range *, FYSPACE::GeneralArrayStorage<3> *)

    Report from: Code generation optimizations [cg]

../include/FYArray.hxx(640:20)::_ZN7FYSPACE7FYArrayIdLi3EEC1ENS_5RangeES2_S2_NS_19GeneralArrayStorageILi3EEE:  Assume directive not useful: removing

../include/FYArray.hxx(636:20)::_ZN7FYSPACE7FYArrayIdLi3EEC1ENS_5RangeES2_S2_NS_19GeneralArrayStorageILi3EEE:  Assume directive not useful: removing


    Report from: Vector optimizations [vec]


LOOP BEGIN at ../include/FYStorage.h(86,9) inlined into ../include/FYArray.hxx(169,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between result (88:13) and result (88:13)
LOOP END

LOOP BEGIN at ../include/FYArray.hxx(607,9) inlined into ../include/FYArray.hxx(169,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between stride (623:20) and stride (625:13)
LOOP END

LOOP BEGIN at ../include/FYArray.hxx(655,5) inlined into ../include/FYArray.hxx(169,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between this->zeroOffset_ (659:13) and this->zeroOffset_ (663:13)
LOOP END

LOOP BEGIN at ../include/FYProduct.h(34,5) inlined into ../include/FYArray.hxx(169,2)
   remark #15389: vectorization support: reference length->elems[i] has unaligned access   [ ../include/FYSimpleArray.h(67,16) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 3.143
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 0.280 
   remark #15488: --- end vector cost summary ---
LOOP END
===========================================================================

Begin optimization report for: FYSPACE::FYArray<RDouble, 4>::FYArray(FYSPACE::FYArray<RDouble, 4> *, const FYSPACE::FYArray<RDouble, 4> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../include/FYStorage.h(40,9) inlined into ../include/FYArray.hxx(7,16)
   remark #15389: vectorization support: reference this->elems[i] has unaligned access   [ ../include/FYSimpleArray.h(62,16) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15427: loop was completely unrolled
   remark #15309: vectorization support: normalized vectorization overhead 0.667
   remark #15300: LOOP WAS VECTORIZED
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into ../include/FYArray.hxx(7,16)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/4.8.5/bits/stl_algobase.h(751,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.250
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 2 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.530 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into ../include/FYArray.hxx(7,16)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/4.8.5/bits/stl_algobase.h(751,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.250
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 2 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.530 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../include/FYStorage.h(65,30) inlined into ../include/FYArray.hxx(14,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between this->elems[_2] (65:30) and at (65:30)
LOOP END

LOOP BEGIN at ../include/FYStorage.h(66,30) inlined into ../include/FYArray.hxx(14,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between this->elems[_2] (66:30) and at (66:30)
LOOP END

LOOP BEGIN at ../include/FYStorage.h(67,30) inlined into ../include/FYArray.hxx(14,2)
LOOP END

LOOP BEGIN at ../include/FYArray.hxx(514,19) inlined into ../include/FYArray.hxx(14,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between this->elems[_2] (514:19) and array->elems[_2] (514:19)
LOOP END

LOOP BEGIN at ../include/FYArray.hxx(515,19) inlined into ../include/FYArray.hxx(14,2)
LOOP END
===========================================================================

Begin optimization report for: FYSPACE::fortranTag::operator void(FYSPACE::GeneralArrayStorage<4> *, FYSPACE::fortranTag *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../include/FYStorage.h(183,9) inlined into ../include/FYStorage.h(213,7)
   remark #15388: vectorization support: reference U7_V.U7_V.U7_V.U7_V[i] has aligned access   [ ../include/FYSimpleArray.h(62,16) ]
   remark #15305: vectorization support: vector length 4
   remark #15427: loop was completely unrolled
   remark #15309: vectorization support: normalized vectorization overhead 0.333
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 2 
   remark #15477: vector cost: 0.750 
   remark #15478: estimated potential speedup: 2.000 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into ../include/FYStorage.h(213,7)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/4.8.5/bits/stl_algobase.h(751,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.250
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 2 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.530 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into ../include/FYStorage.h(213,7)
   remark #15389: vectorization support: reference *__first has unaligned access   [ /usr/include/c++/4.8.5/bits/stl_algobase.h(751,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.250
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 2 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.530 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../include/FYStorage.h(49,37) inlined into ../include/FYStorage.h(213,14)
   remark #15389: vectorization support: reference __p1->elems[_2] has unaligned access   [ ../include/FYStorage.h(48,5) ]
   remark #15388: vectorization support: reference U7_V.U7_V.U7_V.U7_V[_2] has aligned access   [ ../include/FYStorage.h(212,14) ]
   remark #15389: vectorization support: reference __p1->elems[_2] has unaligned access   [ ../include/FYStorage.h(48,5) ]
   remark #15389: vectorization support: reference U7_V.U7_V.U7_V.U7_V[_2] has unaligned access   [ ../include/FYStorage.h(212,14) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15427: loop was completely unrolled
   remark #15309: vectorization support: normalized vectorization overhead 0.429
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 7 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 1.400 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../include/FYStorage.h(49,68) inlined into ../include/FYStorage.h(213,14)
LOOP END

LOOP BEGIN at ../include/FYStorage.h(49,94) inlined into ../include/FYStorage.h(213,14)
LOOP END

LOOP BEGIN at ../include/FYStorage.h(49,37) inlined into ../include/FYStorage.h(213,14)
<Distributed chunk2>
   remark #15389: vectorization support: reference __p1->elems[_2] has unaligned access   [ ../include/FYStorage.h(48,5) ]
   remark #15389: vectorization support: reference U7_V.U7_V.U7_V.U7_V[_2] has unaligned access   [ ../include/FYStorage.h(212,14) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.375
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 4.000 
   remark #15478: estimated potential speedup: 0.720 
   remark #15488: --- end vector cost summary ---
LOOP END
===========================================================================

Begin optimization report for: preccheck(RDouble4D *, RDouble4D *, RDouble4D *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at main.cpp(318,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ main.cpp(320,11) ]
LOOP END


Non-optimizable loops:


LOOP BEGIN at main.cpp(312,6)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ main.cpp(320,11) ]

   LOOP BEGIN at main.cpp(314,7)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ main.cpp(320,11) ]

      LOOP BEGIN at main.cpp(316,4)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ main.cpp(320,11) ]
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: preccheck_small(RDouble4D *, RDouble4D *, RDouble4D *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at main.cpp(379,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ main.cpp(381,11) ]
LOOP END


Non-optimizable loops:


LOOP BEGIN at main.cpp(373,2)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ main.cpp(381,11) ]

   LOOP BEGIN at main.cpp(375,3)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ main.cpp(381,11) ]

      LOOP BEGIN at main.cpp(377,4)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ main.cpp(381,11) ]
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: tbb::flow::interface10::graph::~graph(tbb::flow::interface10::graph *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.8.5/bits/list.tcc(70,7) inlined into /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/flow_graph.h(771,1)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END
===========================================================================

Begin optimization report for: std::list<tbb::task *, std::allocator<tbb::task *>>::~list(std::list<tbb::task *, std::allocator<tbb::task *>> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.8.5/bits/list.tcc(70,7) inlined into /usr/include/c++/4.8.5/bits/stl_list.h(439,11)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END
===========================================================================

Begin optimization report for: tbb::flow::interface10::graph::~graph(tbb::flow::interface10::graph *const)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.8.5/bits/list.tcc(70,7) inlined into /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/flow_graph.h(765,15)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END
===========================================================================

Begin optimization report for: tbb::flow::interface10::graph_node::~graph_node(tbb::flow::interface10::graph_node *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/tbb_machine.h(925,5) inlined into /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/flow_graph.h(856,14)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/machine/gcc_ia32_common.h(49,0) ]

   LOOP BEGIN at /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/machine/gcc_ia32_common.h(48,5) inlined into /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/flow_graph.h(856,14)
      remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/machine/gcc_ia32_common.h(49,0) ]
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: tbb::flow::interface10::graph_node::~graph_node(tbb::flow::interface10::graph_node *const)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/tbb_machine.h(925,5) inlined into /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/flow_graph.h(855,20)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/machine/gcc_ia32_common.h(49,0) ]

   LOOP BEGIN at /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/machine/gcc_ia32_common.h(48,5) inlined into /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/flow_graph.h(855,20)
      remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/machine/gcc_ia32_common.h(49,0) ]
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: tbb::interface9::internal::start_for<tbb::blocked_range<size_t>, struct lambda [] type at line 171607, col. 6, const tbb::auto_partitioner>::execute(tbb::interface9::internal::start_for<tbb::blocked_range<size_t>, struct lambda [] type at line 171607, col. 6, const tbb::auto_partitioner> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/partitioner.h(176,9) inlined into /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/parallel_for.h(144,22)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at ../include/FYOps.hxx(601,41) inlined into /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/parallel_for.h(144,22)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at ../include/FYOps.hxx(601,41) inlined into /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/parallel_for.h(144,22)
   remark #15388: vectorization support: reference *this->data[i] has aligned access   [ ../include/FYET.h(28,3) ]
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 2.540 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../include/FYOps.hxx(601,41) inlined into /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/parallel_for.h(144,22)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/partitioner.h(169,9) inlined into /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/parallel_for.h(144,22)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between range_pool.my_head (190:9) and range_pool.my_head (190:9)
LOOP END

LOOP BEGIN at ../include/FYOps.hxx(601,41) inlined into /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/parallel_for.h(144,22)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at ../include/FYOps.hxx(601,41) inlined into /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/parallel_for.h(144,22)
   remark #15388: vectorization support: reference *this->data[i] has aligned access   [ ../include/FYET.h(28,3) ]
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 2.540 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../include/FYOps.hxx(601,41) inlined into /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/parallel_for.h(144,22)
<Remainder loop for vectorization>
LOOP END


Non-optimizable loops:


LOOP BEGIN at /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/partitioner.h(254,33) inlined into /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/parallel_for.h(144,22)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/tbb_machine.h(616,0) ]
LOOP END

LOOP BEGIN at /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/partitioner.h(456,52) inlined into /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/parallel_for.h(144,22)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/task.h(1047,15) ]
LOOP END
===========================================================================

Begin optimization report for: tbb::interface9::internal::range_vector<tbb::blocked_range<size_t>, (tbb::interface9::internal::depth_t)'\b'>::~range_vector(tbb::interface9::internal::range_vector<tbb::blocked_range<size_t>, (tbb::interface9::internal::depth_t)'\b'> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/partitioner.h(169,9)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between this->my_head (190:9) and this->my_head (190:9)
LOOP END
===========================================================================

Begin optimization report for: tbb::interface9::internal::start_for<tbb::blocked_range<size_t>, struct lambda [] type at line 171607, col. 6, const tbb::auto_partitioner>::execute(tbb::interface9::internal::start_for<tbb::blocked_range<size_t>, struct lambda [] type at line 171607, col. 6, const tbb::auto_partitioner> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/partitioner.h(176,9) inlined into /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/parallel_for.h(144,22)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at ../include/FYOps.hxx(601,41) inlined into /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/parallel_for.h(144,22)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at ../include/FYOps.hxx(601,41) inlined into /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/parallel_for.h(144,22)
   remark #15388: vectorization support: reference *this->data[i] has aligned access   [ ../include/FYET.h(28,3) ]
   remark #15389: vectorization support: reference this->expr->iter_->iter1_->iter_->iter1_->data_[i] has unaligned access   [ ../include/FYFastArrayIterator.h(146,10) ]
   remark #15389: vectorization support: reference this->expr->iter_->iter1_->iter_->iter2_->data_[i] has unaligned access   [ ../include/FYFastArrayIterator.h(146,10) ]
   remark #15389: vectorization support: reference this->expr->iter_->iter2_->iter_->iter1_->data_[i] has unaligned access   [ ../include/FYFastArrayIterator.h(146,10) ]
   remark #15389: vectorization support: reference this->expr->iter_->iter2_->iter_->iter2_->data_[i] has unaligned access   [ ../include/FYFastArrayIterator.h(146,10) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.367
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 4 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 74 
   remark #15477: vector cost: 7.500 
   remark #15478: estimated potential speedup: 8.740 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../include/FYOps.hxx(601,41) inlined into /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/parallel_for.h(144,22)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference *this->data[i] has aligned access   [ ../include/FYET.h(28,3) ]
   remark #15389: vectorization support: reference this->expr->iter_->iter1_->iter_->iter1_->data_[i] has unaligned access   [ ../include/FYFastArrayIterator.h(146,10) ]
   remark #15389: vectorization support: reference this->expr->iter_->iter1_->iter_->iter2_->data_[i] has unaligned access   [ ../include/FYFastArrayIterator.h(146,10) ]
   remark #15389: vectorization support: reference this->expr->iter_->iter2_->iter_->iter1_->data_[i] has unaligned access   [ ../include/FYFastArrayIterator.h(146,10) ]
   remark #15389: vectorization support: reference this->expr->iter_->iter2_->iter_->iter2_->data_[i] has unaligned access   [ ../include/FYFastArrayIterator.h(146,10) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.880
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../include/FYOps.hxx(601,41) inlined into /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/parallel_for.h(144,22)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/partitioner.h(169,9) inlined into /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/parallel_for.h(144,22)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between range_pool.my_head (190:9) and range_pool.my_head (190:9)
LOOP END

LOOP BEGIN at ../include/FYOps.hxx(601,41) inlined into /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/parallel_for.h(144,22)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at ../include/FYOps.hxx(601,41) inlined into /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/parallel_for.h(144,22)
   remark #15388: vectorization support: reference *this->data[i] has aligned access   [ ../include/FYET.h(28,3) ]
   remark #15389: vectorization support: reference this->expr->iter_->iter1_->iter_->iter1_->data_[i] has unaligned access   [ ../include/FYFastArrayIterator.h(146,10) ]
   remark #15389: vectorization support: reference this->expr->iter_->iter1_->iter_->iter2_->data_[i] has unaligned access   [ ../include/FYFastArrayIterator.h(146,10) ]
   remark #15389: vectorization support: reference this->expr->iter_->iter2_->iter_->iter1_->data_[i] has unaligned access   [ ../include/FYFastArrayIterator.h(146,10) ]
   remark #15389: vectorization support: reference this->expr->iter_->iter2_->iter_->iter2_->data_[i] has unaligned access   [ ../include/FYFastArrayIterator.h(146,10) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.367
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 4 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 74 
   remark #15477: vector cost: 7.500 
   remark #15478: estimated potential speedup: 8.740 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../include/FYOps.hxx(601,41) inlined into /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/parallel_for.h(144,22)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference *this->data[i] has aligned access   [ ../include/FYET.h(28,3) ]
   remark #15389: vectorization support: reference this->expr->iter_->iter1_->iter_->iter1_->data_[i] has unaligned access   [ ../include/FYFastArrayIterator.h(146,10) ]
   remark #15389: vectorization support: reference this->expr->iter_->iter1_->iter_->iter2_->data_[i] has unaligned access   [ ../include/FYFastArrayIterator.h(146,10) ]
   remark #15389: vectorization support: reference this->expr->iter_->iter2_->iter_->iter1_->data_[i] has unaligned access   [ ../include/FYFastArrayIterator.h(146,10) ]
   remark #15389: vectorization support: reference this->expr->iter_->iter2_->iter_->iter2_->data_[i] has unaligned access   [ ../include/FYFastArrayIterator.h(146,10) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.880
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../include/FYOps.hxx(601,41) inlined into /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/parallel_for.h(144,22)
<Remainder loop for vectorization>
LOOP END


Non-optimizable loops:


LOOP BEGIN at /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/partitioner.h(254,33) inlined into /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/parallel_for.h(144,22)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/tbb_machine.h(616,0) ]
LOOP END

LOOP BEGIN at /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/partitioner.h(456,52) inlined into /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/parallel_for.h(144,22)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/task.h(1047,15) ]
LOOP END
===========================================================================

Begin optimization report for: tbb::interface9::internal::start_for<tbb::blocked_range<size_t>, struct lambda [] type at line 171607, col. 6, const tbb::auto_partitioner>::execute(tbb::interface9::internal::start_for<tbb::blocked_range<size_t>, struct lambda [] type at line 171607, col. 6, const tbb::auto_partitioner> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/partitioner.h(176,9) inlined into /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/parallel_for.h(144,22)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at ../include/FYOps.hxx(601,41) inlined into /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/parallel_for.h(144,22)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at ../include/FYOps.hxx(601,41) inlined into /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/parallel_for.h(144,22)
   remark #15388: vectorization support: reference *this->data[i] has aligned access   [ ../include/FYET.h(28,3) ]
   remark #15389: vectorization support: reference this->expr->iter_->iter1_->iter_->iter_->data_[i] has unaligned access   [ ../include/FYFastArrayIterator.h(146,10) ]
   remark #15389: vectorization support: reference this->expr->iter_->iter2_->data_[i] has unaligned access   [ ../include/FYFastArrayIterator.h(146,10) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.444
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 33 
   remark #15477: vector cost: 4.500 
   remark #15478: estimated potential speedup: 6.680 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../include/FYOps.hxx(601,41) inlined into /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/parallel_for.h(144,22)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference *this->data[i] has aligned access   [ ../include/FYET.h(28,3) ]
   remark #15389: vectorization support: reference this->expr->iter_->iter1_->iter_->iter_->data_[i] has unaligned access   [ ../include/FYFastArrayIterator.h(146,10) ]
   remark #15389: vectorization support: reference this->expr->iter_->iter2_->data_[i] has unaligned access   [ ../include/FYFastArrayIterator.h(146,10) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.067
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../include/FYOps.hxx(601,41) inlined into /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/parallel_for.h(144,22)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/partitioner.h(169,9) inlined into /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/parallel_for.h(144,22)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between range_pool.my_head (190:9) and range_pool.my_head (190:9)
LOOP END

LOOP BEGIN at ../include/FYOps.hxx(601,41) inlined into /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/parallel_for.h(144,22)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at ../include/FYOps.hxx(601,41) inlined into /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/parallel_for.h(144,22)
   remark #15388: vectorization support: reference *this->data[i] has aligned access   [ ../include/FYET.h(28,3) ]
   remark #15389: vectorization support: reference this->expr->iter_->iter1_->iter_->iter_->data_[i] has unaligned access   [ ../include/FYFastArrayIterator.h(146,10) ]
   remark #15389: vectorization support: reference this->expr->iter_->iter2_->data_[i] has unaligned access   [ ../include/FYFastArrayIterator.h(146,10) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.444
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 33 
   remark #15477: vector cost: 4.500 
   remark #15478: estimated potential speedup: 6.680 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../include/FYOps.hxx(601,41) inlined into /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/parallel_for.h(144,22)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference *this->data[i] has aligned access   [ ../include/FYET.h(28,3) ]
   remark #15389: vectorization support: reference this->expr->iter_->iter1_->iter_->iter_->data_[i] has unaligned access   [ ../include/FYFastArrayIterator.h(146,10) ]
   remark #15389: vectorization support: reference this->expr->iter_->iter2_->data_[i] has unaligned access   [ ../include/FYFastArrayIterator.h(146,10) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.067
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../include/FYOps.hxx(601,41) inlined into /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/parallel_for.h(144,22)
<Remainder loop for vectorization>
LOOP END


Non-optimizable loops:


LOOP BEGIN at /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/partitioner.h(254,33) inlined into /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/parallel_for.h(144,22)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/tbb_machine.h(616,0) ]
LOOP END

LOOP BEGIN at /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/partitioner.h(456,52) inlined into /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/parallel_for.h(144,22)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/task.h(1047,15) ]
LOOP END
===========================================================================

Begin optimization report for: tbb::interface9::internal::start_for<tbb::blocked_range<size_t>, struct lambda [] type at line 171607, col. 6, const tbb::auto_partitioner>::execute(tbb::interface9::internal::start_for<tbb::blocked_range<size_t>, struct lambda [] type at line 171607, col. 6, const tbb::auto_partitioner> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/partitioner.h(176,9) inlined into /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/parallel_for.h(144,22)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at ../include/FYOps.hxx(601,41) inlined into /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/parallel_for.h(144,22)
   remark #15389: vectorization support: reference *this->data[i] has unaligned access   [ ../include/FYET.h(43,1) ]
   remark #15389: vectorization support: reference *this->data[i] has unaligned access   [ ../include/FYET.h(43,1) ]
   remark #15389: vectorization support: reference this->expr->iter_->iter1_->data_[i] has unaligned access   [ ../include/FYFastArrayIterator.h(146,10) ]
   remark #15389: vectorization support: reference this->expr->iter_->iter2_->data_[i] has unaligned access   [ ../include/FYFastArrayIterator.h(146,10) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.231
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 3 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 29 
   remark #15477: vector cost: 6.500 
   remark #15478: estimated potential speedup: 4.230 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../include/FYOps.hxx(601,41) inlined into /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/parallel_for.h(144,22)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference *this->data[i] has unaligned access   [ ../include/FYET.h(43,1) ]
   remark #15389: vectorization support: reference *this->data[i] has unaligned access   [ ../include/FYET.h(43,1) ]
   remark #15389: vectorization support: reference this->expr->iter_->iter1_->data_[i] has unaligned access   [ ../include/FYFastArrayIterator.h(146,10) ]
   remark #15389: vectorization support: reference this->expr->iter_->iter2_->data_[i] has unaligned access   [ ../include/FYFastArrayIterator.h(146,10) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.048
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../include/FYOps.hxx(601,41) inlined into /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/parallel_for.h(144,22)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/partitioner.h(169,9) inlined into /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/parallel_for.h(144,22)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between range_pool.my_head (190:9) and range_pool.my_head (190:9)
LOOP END

LOOP BEGIN at ../include/FYOps.hxx(601,41) inlined into /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/parallel_for.h(144,22)
   remark #15389: vectorization support: reference *this->data[i] has unaligned access   [ ../include/FYET.h(43,1) ]
   remark #15389: vectorization support: reference *this->data[i] has unaligned access   [ ../include/FYET.h(43,1) ]
   remark #15389: vectorization support: reference this->expr->iter_->iter1_->data_[i] has unaligned access   [ ../include/FYFastArrayIterator.h(146,10) ]
   remark #15389: vectorization support: reference this->expr->iter_->iter2_->data_[i] has unaligned access   [ ../include/FYFastArrayIterator.h(146,10) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.231
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 3 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 29 
   remark #15477: vector cost: 6.500 
   remark #15478: estimated potential speedup: 4.230 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../include/FYOps.hxx(601,41) inlined into /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/parallel_for.h(144,22)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference *this->data[i] has unaligned access   [ ../include/FYET.h(43,1) ]
   remark #15389: vectorization support: reference *this->data[i] has unaligned access   [ ../include/FYET.h(43,1) ]
   remark #15389: vectorization support: reference this->expr->iter_->iter1_->data_[i] has unaligned access   [ ../include/FYFastArrayIterator.h(146,10) ]
   remark #15389: vectorization support: reference this->expr->iter_->iter2_->data_[i] has unaligned access   [ ../include/FYFastArrayIterator.h(146,10) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.048
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../include/FYOps.hxx(601,41) inlined into /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/parallel_for.h(144,22)
<Remainder loop for vectorization>
LOOP END


Non-optimizable loops:


LOOP BEGIN at /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/partitioner.h(254,33) inlined into /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/parallel_for.h(144,22)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/tbb_machine.h(616,0) ]
LOOP END

LOOP BEGIN at /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/partitioner.h(456,52) inlined into /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/parallel_for.h(144,22)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/task.h(1047,15) ]
LOOP END
===========================================================================

Begin optimization report for: tbb::interface9::internal::start_for<tbb::blocked_range<size_t>, struct lambda [] type at line 171607, col. 6, const tbb::auto_partitioner>::execute(tbb::interface9::internal::start_for<tbb::blocked_range<size_t>, struct lambda [] type at line 171607, col. 6, const tbb::auto_partitioner> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/partitioner.h(176,9) inlined into /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/parallel_for.h(144,22)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at ../include/FYOps.hxx(601,41) inlined into /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/parallel_for.h(144,22)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at ../include/FYOps.hxx(601,41) inlined into /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/parallel_for.h(144,22)
   remark #15388: vectorization support: reference *this->data[i] has aligned access   [ ../include/FYET.h(28,3) ]
   remark #15389: vectorization support: reference *(this->expr->iter_->iter2_->iter_->iter1_->iter_->iter1_->iter_->iter1_->data_+i*8) has unaligned access   [ ../include/FYFastArrayIterator.h(146,10) ]
   remark #15389: vectorization support: reference *(this->expr->iter_->iter2_->iter_->iter1_->iter_->iter1_->iter_->iter2_->data_+i*8) has unaligned access   [ ../include/FYFastArrayIterator.h(146,10) ]
   remark #15389: vectorization support: reference *(this->expr->iter_->iter2_->iter_->iter1_->iter_->iter2_->data_+i*8) has unaligned access   [ ../include/FYFastArrayIterator.h(146,10) ]
   remark #15389: vectorization support: reference this->expr->iter_->iter2_->iter_->iter2_->data_[i] has unaligned access   [ ../include/FYFastArrayIterator.h(146,10) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.375
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 4 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 113 
   remark #15477: vector cost: 8.000 
   remark #15478: estimated potential speedup: 11.910 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../include/FYOps.hxx(601,41) inlined into /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/parallel_for.h(144,22)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference *this->data[i] has aligned access   [ ../include/FYET.h(28,3) ]
   remark #15389: vectorization support: reference *(this->expr->iter_->iter2_->iter_->iter1_->iter_->iter1_->iter_->iter1_->data_+i*8) has unaligned access   [ ../include/FYFastArrayIterator.h(146,10) ]
   remark #15389: vectorization support: reference *(this->expr->iter_->iter2_->iter_->iter1_->iter_->iter1_->iter_->iter2_->data_+i*8) has unaligned access   [ ../include/FYFastArrayIterator.h(146,10) ]
   remark #15389: vectorization support: reference *(this->expr->iter_->iter2_->iter_->iter1_->iter_->iter2_->data_+i*8) has unaligned access   [ ../include/FYFastArrayIterator.h(146,10) ]
   remark #15389: vectorization support: reference this->expr->iter_->iter2_->iter_->iter2_->data_[i] has unaligned access   [ ../include/FYFastArrayIterator.h(146,10) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.923
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../include/FYOps.hxx(601,41) inlined into /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/parallel_for.h(144,22)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/partitioner.h(169,9) inlined into /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/parallel_for.h(144,22)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between range_pool.my_head (190:9) and range_pool.my_head (190:9)
LOOP END

LOOP BEGIN at ../include/FYOps.hxx(601,41) inlined into /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/parallel_for.h(144,22)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at ../include/FYOps.hxx(601,41) inlined into /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/parallel_for.h(144,22)
   remark #15388: vectorization support: reference *this->data[i] has aligned access   [ ../include/FYET.h(28,3) ]
   remark #15389: vectorization support: reference *(this->expr->iter_->iter2_->iter_->iter1_->iter_->iter1_->iter_->iter1_->data_+i*8) has unaligned access   [ ../include/FYFastArrayIterator.h(146,10) ]
   remark #15389: vectorization support: reference *(this->expr->iter_->iter2_->iter_->iter1_->iter_->iter1_->iter_->iter2_->data_+i*8) has unaligned access   [ ../include/FYFastArrayIterator.h(146,10) ]
   remark #15389: vectorization support: reference *(this->expr->iter_->iter2_->iter_->iter1_->iter_->iter2_->data_+i*8) has unaligned access   [ ../include/FYFastArrayIterator.h(146,10) ]
   remark #15389: vectorization support: reference this->expr->iter_->iter2_->iter_->iter2_->data_[i] has unaligned access   [ ../include/FYFastArrayIterator.h(146,10) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.375
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 4 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 113 
   remark #15477: vector cost: 8.000 
   remark #15478: estimated potential speedup: 11.910 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../include/FYOps.hxx(601,41) inlined into /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/parallel_for.h(144,22)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference *this->data[i] has aligned access   [ ../include/FYET.h(28,3) ]
   remark #15389: vectorization support: reference *(this->expr->iter_->iter2_->iter_->iter1_->iter_->iter1_->iter_->iter1_->data_+i*8) has unaligned access   [ ../include/FYFastArrayIterator.h(146,10) ]
   remark #15389: vectorization support: reference *(this->expr->iter_->iter2_->iter_->iter1_->iter_->iter1_->iter_->iter2_->data_+i*8) has unaligned access   [ ../include/FYFastArrayIterator.h(146,10) ]
   remark #15389: vectorization support: reference *(this->expr->iter_->iter2_->iter_->iter1_->iter_->iter2_->data_+i*8) has unaligned access   [ ../include/FYFastArrayIterator.h(146,10) ]
   remark #15389: vectorization support: reference this->expr->iter_->iter2_->iter_->iter2_->data_[i] has unaligned access   [ ../include/FYFastArrayIterator.h(146,10) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.923
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../include/FYOps.hxx(601,41) inlined into /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/parallel_for.h(144,22)
<Remainder loop for vectorization>
LOOP END


Non-optimizable loops:


LOOP BEGIN at /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/partitioner.h(254,33) inlined into /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/parallel_for.h(144,22)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/tbb_machine.h(616,0) ]
LOOP END

LOOP BEGIN at /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/partitioner.h(456,52) inlined into /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/parallel_for.h(144,22)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/task.h(1047,15) ]
LOOP END
===========================================================================

Begin optimization report for: tbb::interface9::internal::start_for<tbb::blocked_range<size_t>, struct lambda [] type at line 171607, col. 6, const tbb::auto_partitioner>::execute(tbb::interface9::internal::start_for<tbb::blocked_range<size_t>, struct lambda [] type at line 171607, col. 6, const tbb::auto_partitioner> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/partitioner.h(176,9) inlined into /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/parallel_for.h(144,22)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at ../include/FYOps.hxx(601,41) inlined into /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/parallel_for.h(144,22)
   remark #15389: vectorization support: reference *this->data[i] has unaligned access   [ ../include/FYET.h(44,1) ]
   remark #15389: vectorization support: reference *this->data[i] has unaligned access   [ ../include/FYET.h(44,1) ]
   remark #15389: vectorization support: reference this->expr->iter_->iter1_->data_[i] has unaligned access   [ ../include/FYFastArrayIterator.h(146,10) ]
   remark #15389: vectorization support: reference this->expr->iter_->iter2_->data_[i] has unaligned access   [ ../include/FYFastArrayIterator.h(146,10) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.231
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 3 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 29 
   remark #15477: vector cost: 6.500 
   remark #15478: estimated potential speedup: 4.230 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../include/FYOps.hxx(601,41) inlined into /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/parallel_for.h(144,22)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference *this->data[i] has unaligned access   [ ../include/FYET.h(44,1) ]
   remark #15389: vectorization support: reference *this->data[i] has unaligned access   [ ../include/FYET.h(44,1) ]
   remark #15389: vectorization support: reference this->expr->iter_->iter1_->data_[i] has unaligned access   [ ../include/FYFastArrayIterator.h(146,10) ]
   remark #15389: vectorization support: reference this->expr->iter_->iter2_->data_[i] has unaligned access   [ ../include/FYFastArrayIterator.h(146,10) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.048
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../include/FYOps.hxx(601,41) inlined into /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/parallel_for.h(144,22)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/partitioner.h(169,9) inlined into /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/parallel_for.h(144,22)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between range_pool.my_head (190:9) and range_pool.my_head (190:9)
LOOP END

LOOP BEGIN at ../include/FYOps.hxx(601,41) inlined into /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/parallel_for.h(144,22)
   remark #15389: vectorization support: reference *this->data[i] has unaligned access   [ ../include/FYET.h(44,1) ]
   remark #15389: vectorization support: reference *this->data[i] has unaligned access   [ ../include/FYET.h(44,1) ]
   remark #15389: vectorization support: reference this->expr->iter_->iter1_->data_[i] has unaligned access   [ ../include/FYFastArrayIterator.h(146,10) ]
   remark #15389: vectorization support: reference this->expr->iter_->iter2_->data_[i] has unaligned access   [ ../include/FYFastArrayIterator.h(146,10) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.231
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 3 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 29 
   remark #15477: vector cost: 6.500 
   remark #15478: estimated potential speedup: 4.230 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../include/FYOps.hxx(601,41) inlined into /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/parallel_for.h(144,22)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference *this->data[i] has unaligned access   [ ../include/FYET.h(44,1) ]
   remark #15389: vectorization support: reference *this->data[i] has unaligned access   [ ../include/FYET.h(44,1) ]
   remark #15389: vectorization support: reference this->expr->iter_->iter1_->data_[i] has unaligned access   [ ../include/FYFastArrayIterator.h(146,10) ]
   remark #15389: vectorization support: reference this->expr->iter_->iter2_->data_[i] has unaligned access   [ ../include/FYFastArrayIterator.h(146,10) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.048
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../include/FYOps.hxx(601,41) inlined into /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/parallel_for.h(144,22)
<Remainder loop for vectorization>
LOOP END


Non-optimizable loops:


LOOP BEGIN at /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/partitioner.h(254,33) inlined into /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/parallel_for.h(144,22)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/tbb_machine.h(616,0) ]
LOOP END

LOOP BEGIN at /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/partitioner.h(456,52) inlined into /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/parallel_for.h(144,22)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/task.h(1047,15) ]
LOOP END
===========================================================================

Begin optimization report for: tbb::interface9::internal::start_for<tbb::blocked_range<size_t>, struct lambda [] type at line 171607, col. 6, const tbb::auto_partitioner>::execute(tbb::interface9::internal::start_for<tbb::blocked_range<size_t>, struct lambda [] type at line 171607, col. 6, const tbb::auto_partitioner> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/partitioner.h(176,9) inlined into /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/parallel_for.h(144,22)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at ../include/FYOps.hxx(601,41) inlined into /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/parallel_for.h(144,22)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at ../include/FYOps.hxx(601,41) inlined into /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/parallel_for.h(144,22)
   remark #15388: vectorization support: reference *this->data[i] has aligned access   [ ../include/FYET.h(28,3) ]
   remark #15389: vectorization support: reference this->expr->iter_->iter2_->iter_->iter1_->data_[i] has unaligned access   [ ../include/FYFastArrayIterator.h(146,10) ]
   remark #15389: vectorization support: reference this->expr->iter_->iter2_->iter_->iter2_->data_[i] has unaligned access   [ ../include/FYFastArrayIterator.h(146,10) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.115
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 71 
   remark #15477: vector cost: 19.500 
   remark #15478: estimated potential speedup: 3.500 
   remark #15486: divides: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../include/FYOps.hxx(601,41) inlined into /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/parallel_for.h(144,22)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference *this->data[i] has aligned access   [ ../include/FYET.h(28,3) ]
   remark #15389: vectorization support: reference this->expr->iter_->iter2_->iter_->iter1_->data_[i] has unaligned access   [ ../include/FYFastArrayIterator.h(146,10) ]
   remark #15389: vectorization support: reference this->expr->iter_->iter2_->iter_->iter2_->data_[i] has unaligned access   [ ../include/FYFastArrayIterator.h(146,10) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.400
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../include/FYOps.hxx(601,41) inlined into /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/parallel_for.h(144,22)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/partitioner.h(169,9) inlined into /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/parallel_for.h(144,22)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between range_pool.my_head (190:9) and range_pool.my_head (190:9)
LOOP END

LOOP BEGIN at ../include/FYOps.hxx(601,41) inlined into /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/parallel_for.h(144,22)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at ../include/FYOps.hxx(601,41) inlined into /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/parallel_for.h(144,22)
   remark #15388: vectorization support: reference *this->data[i] has aligned access   [ ../include/FYET.h(28,3) ]
   remark #15389: vectorization support: reference this->expr->iter_->iter2_->iter_->iter1_->data_[i] has unaligned access   [ ../include/FYFastArrayIterator.h(146,10) ]
   remark #15389: vectorization support: reference this->expr->iter_->iter2_->iter_->iter2_->data_[i] has unaligned access   [ ../include/FYFastArrayIterator.h(146,10) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.115
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 71 
   remark #15477: vector cost: 19.500 
   remark #15478: estimated potential speedup: 3.500 
   remark #15486: divides: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../include/FYOps.hxx(601,41) inlined into /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/parallel_for.h(144,22)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference *this->data[i] has aligned access   [ ../include/FYET.h(28,3) ]
   remark #15389: vectorization support: reference this->expr->iter_->iter2_->iter_->iter1_->data_[i] has unaligned access   [ ../include/FYFastArrayIterator.h(146,10) ]
   remark #15389: vectorization support: reference this->expr->iter_->iter2_->iter_->iter2_->data_[i] has unaligned access   [ ../include/FYFastArrayIterator.h(146,10) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.400
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../include/FYOps.hxx(601,41) inlined into /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/parallel_for.h(144,22)
<Remainder loop for vectorization>
LOOP END


Non-optimizable loops:


LOOP BEGIN at /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/partitioner.h(254,33) inlined into /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/parallel_for.h(144,22)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/tbb_machine.h(616,0) ]
LOOP END

LOOP BEGIN at /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/partitioner.h(456,52) inlined into /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/parallel_for.h(144,22)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/task.h(1047,15) ]
LOOP END
===========================================================================

Begin optimization report for: tbb::interface9::internal::start_for<tbb::blocked_range<size_t>, struct lambda [] type at line 171607, col. 6, const tbb::auto_partitioner>::execute(tbb::interface9::internal::start_for<tbb::blocked_range<size_t>, struct lambda [] type at line 171607, col. 6, const tbb::auto_partitioner> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/partitioner.h(176,9) inlined into /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/parallel_for.h(144,22)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at ../include/FYOps.hxx(601,41) inlined into /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/parallel_for.h(144,22)
   remark #15389: vectorization support: reference *this->data[i] has unaligned access   [ ../include/FYET.h(45,1) ]
   remark #15389: vectorization support: reference *this->data[i] has unaligned access   [ ../include/FYET.h(45,1) ]
   remark #15389: vectorization support: reference this->expr->data_[i] has unaligned access   [ ../include/FYFastArrayIterator.h(146,10) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.225
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 9 
   remark #15477: vector cost: 5.000 
   remark #15478: estimated potential speedup: 1.770 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../include/FYOps.hxx(601,41) inlined into /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/parallel_for.h(144,22)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference *this->data[i] has unaligned access   [ ../include/FYET.h(45,1) ]
   remark #15389: vectorization support: reference *this->data[i] has unaligned access   [ ../include/FYET.h(45,1) ]
   remark #15389: vectorization support: reference this->expr->data_[i] has unaligned access   [ ../include/FYFastArrayIterator.h(146,10) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.188
LOOP END

LOOP BEGIN at /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/partitioner.h(169,9) inlined into /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/parallel_for.h(144,22)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between range_pool.my_head (190:9) and range_pool.my_head (190:9)
LOOP END

LOOP BEGIN at ../include/FYOps.hxx(601,41) inlined into /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/parallel_for.h(144,22)
   remark #15389: vectorization support: reference *this->data[i] has unaligned access   [ ../include/FYET.h(45,1) ]
   remark #15389: vectorization support: reference *this->data[i] has unaligned access   [ ../include/FYET.h(45,1) ]
   remark #15389: vectorization support: reference this->expr->data_[i] has unaligned access   [ ../include/FYFastArrayIterator.h(146,10) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.225
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 9 
   remark #15477: vector cost: 5.000 
   remark #15478: estimated potential speedup: 1.770 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../include/FYOps.hxx(601,41) inlined into /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/parallel_for.h(144,22)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference *this->data[i] has unaligned access   [ ../include/FYET.h(45,1) ]
   remark #15389: vectorization support: reference *this->data[i] has unaligned access   [ ../include/FYET.h(45,1) ]
   remark #15389: vectorization support: reference this->expr->data_[i] has unaligned access   [ ../include/FYFastArrayIterator.h(146,10) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.188
LOOP END


Non-optimizable loops:


LOOP BEGIN at /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/partitioner.h(254,33) inlined into /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/parallel_for.h(144,22)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/tbb_machine.h(616,0) ]
LOOP END

LOOP BEGIN at /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/partitioner.h(456,52) inlined into /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/parallel_for.h(144,22)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /opt/intel/compilers_and_libraries_2018.5.274/linux/tbb/include/tbb/task.h(1047,15) ]
LOOP END
===========================================================================
